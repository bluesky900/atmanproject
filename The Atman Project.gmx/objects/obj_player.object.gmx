<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//--------------------
//Initialize Variables
//--------------------
xvel = 0;           //x speed
yvel = 0;           //y speed
inertia = 0;        //ground speed 
jmpspeed = 7;       //initial speed when moving away from the ground for a jump
grav = 0.21875;     //rate at which y speed increases while airborne
angle = 0;          //angle the player is currently at while on the ground
status = 0          //player state (0=on the ground,1=in the air)

//Constants
acc = 0.046875;     //movement acceleration
dec = 0.5;          //movement deceleration
frc = 0.046875;     //friction on the ground
top = 6;            //top speed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//------------
//Player input
//------------
key_right = keyboard_check(vk_right)
key_left = -keyboard_check(vk_left)
key_jump = keyboard_check_pressed(ord('A')) or keyboard_check_pressed(ord('S')) or keyboard_check_pressed(ord('D'))

move = key_left + key_right

//---------------------
//Movement and friction
//---------------------
if status = 0
{
//Constants
x += xvel
y += yvel

xvel = inertia*cos(angle)
yvel = inertia*-sin(angle)

//Ground movement
if move = -1
{
    if (inertia &gt; 0)
    {
        inertia -= dec
    }
    else if inertia &gt; -top
    {
        inertia = inertia-acc
    }
}
else if move = 1
{
    if (inertia &lt; 0)  
    {
        inertia += dec
    }
    else if inertia &lt; top
    {
    inertia = inertia+acc
    }
}
else inertia = inertia-(frc*sign(inertia))

//Jumping
if key_jump = 1
{
    xvel -= jmpspeed*sin(angle)
    yvel  -= jmpspeed*cos(angle)   
    status = 1
    acc = 0.09375
}

//Horizontal Collision
if (place_meeting(x+xvel,y,obj_testwall))
{
    while(!place_meeting(x+sign(xvel),y,obj_testwall))
    {
        x += sign(xvel)
    }
    xvel = 0
}

//Vertical Collision
if (place_meeting(x,y+yvel,obj_testwall))
{
    while(!place_meeting(x,y+sign(yvel),obj_testwall))
    {
        y += sign(yvel)
    }
    yvel = 0
}
else
    status = 1
    acc = 0.09375
}

//------------
//Air Movement
//------------
if status = 1
{

x += xvel
y += yvel

if move = -1
{
    if (xvel &gt; 0)
    {
        xvel -= dec
    }
    else if xvel &gt; -top
    {
        xvel = xvel-acc
    }
}
else if move = 1
{
    if (xvel &lt; 0) 
    {
        xvel += dec
    }
    else if xvel &lt; top
    {
        xvel = xvel+acc
    }
}

if yvel &lt; 0 and yvel &gt; -4
{
    if abs(xvel) &gt;= 0.125 then xvel = xvel*0.96875
}

if (yvel &lt; 10) yvel += grav

if yvel &gt; 16 then yvel = 16

if (place_meeting(x,y+yvel,obj_testwall))
{
    while(!place_meeting(x,y+sign(yvel),obj_testwall))
    {
        y += sign(yvel)
    }
    yvel = 0
    inertia = xvel
    status = 0
    acc = 0.046875    
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
